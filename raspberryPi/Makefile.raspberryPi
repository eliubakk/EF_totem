COMPILER_BASE = /mnt/d/Documents/Programming/gcc/arm-eabi-8.3
COMPILER_BIN = $(COMPILER_BASE)/arm-eabi/bin
COMPILER_INC = $(COMPILER_BASE)/arm-eabi/include
COMPILER_LIB = $(COMPILER_BASE)/arm-eabi/lib

ARMGNU = $(COMPILER_BIN)

GCC = $(COMPILER_BASE)/bin/arm-eabi-gcc

AOPS = --warn --fatal-warnings -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
COPS = -Wall -Werror -O2 -nostdlib -nostartfiles -ffreestanding -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard

HARDWARE = raspberryPi
PROJ_ROOT = $(HARDWARE)

PROJECT_NAME = $(PROJ_ROOT)/blinker04
LINK_SCRIPT = $(PROJ_ROOT)/linker_script

ASM_FILES = vectors.s
SRC_FILES = BCM2836_HW.c PWM.c DMA.c WS2812B_LED_Drv.c

ASMS = $(patsubst %, $(PROJ_ROOT)/%, $(ASM_FILES))
SRCS = $(patsubst %, $(PROJ_ROOT)/%, $(SRC_FILES))

OBJS = $(patsubst %.s, %.o, $(ASMS)) $(patsubst %.c, %.o, $(SRCS)) $(PROJECT_NAME).o

gcc : $(PROJECT_NAME).hex kernel.img

all : gcc

clean :
	rm -f $(PROJ_ROOT)/*.o
	rm -f $(PROJ_ROOT)/*.bin
	rm -f $(PROJ_ROOT)/*.hex
	rm -f $(PROJ_ROOT)/*.elf
	rm -f $(PROJ_ROOT)/*.list
	rm -f $(PROJ_ROOT)/*.img
	rm -f $(PROJ_ROOT)/*.bc
	rm -f $(PROJ_ROOT)/*.clang.opt.s

$(patsubst %.s, %.o, $(ASMS)): %.o : %.s
	$(ARMGNU)/as $(AOPS) $^ -o $@

$(patsubst %.c, %.o, $(SRCS)): %.o : %.c %.h
	$(GCC) $(COPS) -c $< -o $@
	$(ARMGNU)/objdump -D $@ > $*.list

$(PROJECT_NAME).o : $(PROJECT_NAME).c
	$(GCC) $(COPS) -c $^ -o $@

$(PROJECT_NAME).elf : $(LINK_SCRIPT) $(OBJS) 
	$(ARMGNU)/ld.bfd $(OBJS) -T $(LINK_SCRIPT) -o $(PROJECT_NAME).elf
	$(ARMGNU)/objdump -D $(PROJECT_NAME).elf > $(PROJECT_NAME).list

$(PROJECT_NAME).bin : $(PROJECT_NAME).elf
	$(ARMGNU)/objcopy $(PROJECT_NAME).elf -O binary $(PROJECT_NAME).bin

$(PROJECT_NAME).hex : $(PROJECT_NAME).elf
	$(ARMGNU)/objcopy $(PROJECT_NAME).elf -O ihex $(PROJECT_NAME).hex

kernel.img : $(PROJECT_NAME).bin
	cp $(PROJECT_NAME).bin $(PROJ_ROOT)/kernel.img
